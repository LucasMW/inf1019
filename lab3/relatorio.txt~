EXERCICIOS PARA O LAB3:
1) Execute o programa “ctrl-c.c”.
Digite Ctrl-C e Ctrl-\. Analise o resultado.
Neste mesmo programa, remova os comandos signal( ) e repita o teste anterior
observando os resultados.

ctrlC.c
------------------------------------------------
#include <stdio.h>
#include <signal.h>
#include <stdlib.h>
#define EVER ;;
void intHandler(int sinal);
void quitHandler(int sinal);
int main (void)
{
void (*p)(int); // ponteiro para função que recebe int como parâmetro
p = signal(SIGINT, intHandler);
printf("Endereco do manipulador anterior %p\n", p);
p = signal(SIGQUIT, quitHandler);
printf("Endereco do manipulador anterior %p\n", p);
puts ("Ctrl-C desabilitado. Use Ctrl-\\ para terminar");
for(EVER);
}
void intHandler(int sinal)
{
printf("Você pressionou Ctrl-C (%d)", sinal);
}
void quitHandler(int sinal)
{
puts ("Terminando o processo...");
exit (0);
}
--------------------------------------------------------------------------
[yukon.grad.inf.puc-rio.br:~/inf1019/lab3] gcc -Wall -o crtl-C crtlC.c
[yukon.grad.inf.puc-rio.br:~/inf1019/lab3] ./crtl-C
Endereco do manipulador anterior (nil)
Endereco do manipulador anterior (nil)
Ctrl-C desabilitado. Use Ctrl-\ para terminar
^C
^\Você pressionou Ctrl-C (2)Terminando o processo...
[yukon.grad.inf.puc-rio.br:~/inf1019/lab3] 
----------------------------------------------------------
O programa não responde aos Ctrls-C, mas após pressionar Ctrl-\
Ele escreverá  "Você pressionou Ctrl-C (2)" quantas vezes o usuário apertar Ctrl-C

ctrlCss.c
----------------------------
#include <stdio.h>
#include <signal.h>
#include <stdlib.h>
#define EVER ;;
void intHandler(int sinal);
void quitHandler(int sinal);
int main (void)
{
void (*p)(int); // ponteiro para função que recebe int como parâmetro
//p = signal(SIGINT, intHandler);
printf("Endereco do manipulador anterior %p\n", p);
//p = signal(SIGQUIT, quitHandler);
printf("Endereco do manipulador anterior %p\n", p);
puts ("Ctrl-C desabilitado. Use Ctrl-\\ para terminar");
for(EVER);
}
void intHandler(int sinal)
{
printf("Você pressionou Ctrl-C (%d)", sinal);
}
void quitHandler(int sinal)
{
puts ("Terminando o processo...");
exit (0);
}
----------------------------------------------------------------
[yukon.grad.inf.puc-rio.br:~/inf1019/lab3] gcc -Wall -o crtl-Css crtlCss.c 
crtlCss.c: In function ‘main’:
crtlCss.c:12:7: warning: ‘p’ is used uninitialized in this function [-Wuninitialized]
 printf("Endereco do manipulador anterior %p\n", p);
       ^
[yukon.grad.inf.puc-rio.br:~/inf1019/lab3] ./crtl-Css
Endereco do manipulador anterior (nil)
Endereco do manipulador anterior (nil)
Ctrl-C desabilitado. Use Ctrl-\ para terminar
^C
[yukon.grad.inf.puc-rio.br:~/inf1019/lab3] ./crtl-Css
Endereco do manipulador anterior (nil)
Endereco do manipulador anterior (nil)
Ctrl-C desabilitado. Use Ctrl-\ para terminar
^\Quit (core dumped)

O programa termina tanto com CTRL-C como com CTRL-\, e não mostra aquelas strings derivadas do tratamento. 

2) Tente fazer um programa para interceptar o sinal SIGKILL. Você conseguiu? Explique.

signal.c
---------------------------------
#include <stdio.h>
#include <unistd.h>
#include <signal.h>
void handler(int sinal);
int main (void)
{
signal(SIGKILL, handler);
puts ("vou parar...");
pause();
puts ("Continuei!");
return 0;
}
void handler(int sinal)
{
printf ("Sinal %d recebido\n", sinal);
}
---------------------------------
[yukon.grad.inf.puc-rio.br:~/inf1019/lab3] gcc -Wall -o signal signal.c
[yukon.grad.inf.puc-rio.br:~/inf1019/lab3] ./signal 
vou parar...
Killed
---------------------------------
SIGKILL não pode ser interceptado 

3)
filhocidio.c
---------------------------------------------------------
#include <signal.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include<wait.h>
#define EVER ;;
void childhandler(int signo);
int delay;
int main (int argc, char *argv[])
{
pid_t pid;
signal(SIGCHLD, childhandler);
if ((pid = fork()) < 0)
{
 printf("fork<0\n");
fprintf(stderr, "Erro ao criar filho\n");
exit(-1);
}
if (pid == 0) /* child */
{
for(EVER); /* ou sleep(3);*/
}
else /* parent */
{
sscanf(argv[1], "%d", &delay); /* read delay from command line */
sleep(delay);
printf("Program %s exceeded limit of %d seconds!\n", argv[2], delay);
kill(pid, SIGKILL);
}
return 0;
}
void childhandler(int signo) /* Executed if child dies before parent */
{
int status;
pid_t pid = wait(&status);
printf("Child %d terminated within %d seconds com estado %d.\n", pid, delay,status);
exit(0);
}
-------------------------------------------------------------

[yukon.grad.inf.puc-rio.br:~/inf1019/lab3] gcc -Wall -o filhocidio filhocidio.c
[yukon.grad.inf.puc-rio.br:~/inf1019/lab3] ./filhocidio 2 processoX
Program processoX exceeded limit of 2 seconds!
[yukon.grad.inf.puc-rio.br:~/inf1019/lab3] ./filhocidio 10 processoX
Program processoX exceeded limit of 10 seconds!
[yukon.grad.inf.puc-rio.br:~/inf1019/lab3] ./filhocidio 10 processoX
Child 4403 terminated within 10 seconds com estado 9.


O programa espera a linha de comando ./filhocidio segundos<int> nomedoprograma<string>
sendo o inteiro os segundos que ele esperará para se terminar e a string será seu nome
Se o numero de segundos entrado passar e ele não receber kill dirá:
Program nomedoprograma exceeded limit of segundos seconds! onde segundos e nomedoprograma são substituídos pelos valores entrados
Se o pai receber kill, o programa para.
Se o filho receber kill, o programa retornará a string 
Child pid terminated within segundos seconds com estado status.
onde pid é o pid do insância filho, segundos é o valor entrado e stautus é o valor retornado pelo wait()
dentro do handler


















3) Execute e explique o funcionamento de filhocidio.c
