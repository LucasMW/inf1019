1)1) Execute o programa dado (exemplo de uso de semáforos) e explique sua execução.

lab7.1.c
-----------------------------------------------
#include <sys/sem.h>
#include <unistd.h> 
#include <stdio.h>
#include <stdlib.h> 
#include <ctype.h>

union semun 
{
	int val; struct semid_ds *buf; ushort *array;
};

// inicializa o valor do semáforo
int setSemValue(int semId);
// remove o semáforo 
void delSemValue(int semId); 
// operação P 
int semaforoP(int semId); 
//operação V int semaforoV(int semId);
int semaforoV(int semId);

int main (int argc, char * argv[])
{
	int i; 
	char letra = 'o'; 
	int semId;

	if (argc > 1) 
	{
		semId = semget (8752, 1, 0666 | IPC_CREAT); 
		setSemValue(semId);
		letra = 'x'; 
		sleep (2);
	} 
	else 
	{

		while ((semId = semget (8752, 1, 0666)) < 0)
		{
			putchar ('.'); fflush(stdout); sleep (1);
		}

	}

	for (i=0; i<10; i++)

	{
		semaforoP(semId); 
		putchar (toupper(letra)); 
		fflush(stdout); sleep (rand() %3);
		putchar (letra);
		fflush(stdout);
		semaforoV(semId);
		sleep (rand() %2);
	}

	printf ("\nProcesso %d terminou\n", getpid());

	if (argc > 1)
	{
		sleep(10); 
		delSemValue(semId);
	}

	return 0;

}

int setSemValue(int semId) 
{
	union semun semUnion;
	 semUnion.val = 1; 
	return semctl(semId, 0, SETVAL, semUnion);
} 
void delSemValue(int semId)
{
	union semun semUnion;
 	semctl(semId, 0, IPC_RMID, semUnion);
} 
int semaforoP(int semId)
{

	struct sembuf semB; 
	semB.sem_num = 0; 
	semB.sem_op = -1;
	semB.sem_flg = SEM_UNDO;
	semop(semId, &semB, 1);
  return 0;
} 
int semaforoV(int semId)
{
	struct sembuf semB; 
	semB.sem_num = 0; 
	semB.sem_op = 1;
	semB.sem_flg = SEM_UNDO; 
	semop(semId, &semB, 1);
	return 0;
}
-----------------------------------------------------
[c1310844@mississipi lab7]$ gcc -o lab7.1 lab7.1.c
[c1310844@mississipi lab7]$ ./lab7.1
....................................................................^C

[c1310844@mississipi lab7]$ ./lab7.1 &
[2] 2187
[c1310844@mississipi lab7]$ .../lab7.1 &......1

(Na verdade, 
[c1310844@mississipi lab7]$ ./lab7.1 &
[2] 2187
[c1310844@mississipi lab7]$ ./lab7.1 1)

OoOoXxOoXxOoXxOoXxOoXxOoXxOoXxOoOoX
Processo 2187 terminou
xXxXx
Processo 2191 terminou
[2]  - Done                          ./lab7.1

-----------------------------------------------------
Se o programa for inicializado sem argumentos 
ex ./lab7.1 ou ./lab7.1 &
o programa aguarda a criação de um semáforo específico, enquanto imprime '.' na tela a cada segundo
se o programa for incializado com argumentos ele cria o semáforo específicado
e começa a imprimir Xx (alternando maiúsculas e minúsculas do x) até 10 pares. quando termina.
Se antes de o programa ter sido inicializado com argumentos , ele tivesse sido inicializado sem
o programa 
imprimirá pares de Oo e Xx (10 de cada um) em sequência semi-aleatória sendo os Xx do programa inicializado com parâmtro e os Oo do programa que foi inicializado sem, que aguardava o semáforo

2) Escreva um programa concorrente formado por dois processos que sincronizam suas ações com o uso de semáforos. Um dos processos espera 2 segundos e deve esperar pelo outro que demora 4 segundos e vice-versa em um loop infinito.
Coloque mensagens indicando o estado de cada um.

3) Produtor-Consumidor

>Escreva um programa formado por dois processos concorrentes leitor e impressor que compartilham uma área de trabalho (memória) executando um loop infinito. Para sincronizar as suas ações, eles fazem uso de semáforos.

> O processo leitor fica lendo caracteres da entrada padrão e colocando em um buffer de 256 posições. Quando o buffer está cheio o processo impressor deve imprimi-lo na saída padrão.
